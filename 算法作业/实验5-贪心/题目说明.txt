背包问题
任务描述

本关任务：有n个物品，其重量分别是{w1, w2,..., wn}，价值分别为{v1, v2,..., vn}，背包的容量为C，请设计一种合理的贪心策略使得装入背包的物品的价值达到最大值？并用C语言完成算法实现。
相关知识

为了完成本关任务，你需要掌握：1.贪心法设计思想，2.如何设计贪心策略。
贪心法设计思想

 贪心法在解决问题的策略上目光短浅，只根据当前已有的信息就做出选择，而且一旦做出了选择，不管将来有什么结果，这个选择都不会改变。换言之，贪心法并不是从整体最优考虑，它所做出的选择只是在某种意义上的局部最优。
这种局部最优选择并不总能获得整体最优解（Optimal Solution），但通常能获得近似最优解（Near-Optimal Solution）
编程要求

根据提示，在右侧编辑器补充代码，计算并输出装入背包的物品价值的最大值。
测试说明

平台会对你编写的代码进行测试：

测试输入：
3
50
20,60
30,120
10,50
预期输出：
200

找零钱问题
任务描述

本关任务：设计一个贪婪算法，使得找的钱币张数最少。

商店售货员找给 1 个顾客 n 元，用以下七种面值的纸币：100 元，50 元，20 元，10 元，5 元，2 元，1 元。

思考：如果商店售货员找给 1 个顾客 140 元，假设钱币的面值有九种：100 元，70 元，50 元，20 元，10 元，7 元，5 元，2 元，1 元。用贪婪算法得到的是该问题的最优解吗？
相关知识

为了完成本关任务，你需要掌握：
1.贪心法的设计思想；
2.如何设计贪心选择策略。
贪心法的设计思想

贪心算法（Greedy Alogorithm）又叫登山算法，它的根本思想是逐步到达山顶，即逐步获得最优解，是解决最优化问题时的一种简单但是适用范围有限的策略。

贪心算法没有固定的框架，算法设计的关键是贪婪策略的选择。贪心策略要无后向性，也就是说某状态以后的过程不会影响以前的状态，至于当前状态有关。
编程要求

请在右侧编辑器Begin-End处补充代码，完成本关任务，注意需要学生自己获取找的钱 n。
测试说明

平台会对你编写的代码进行测试，比对你输出的数值与实际正确数值，只有所有数据全部计算正确才能通过测试：

测试输入：123（需要找给顾客的钱 n元）

预期输出：
123=100+20+2+1

图着色问题
任务描述

本关任务：利用贪心法设计思想编写一个能解决图着色问题的小程序。
相关知识

为了完成本关任务，你需要掌握：

    贪心法的设计思想；
    二维数组输入。

贪心法的设计思想

贪心法在解决问题的策略上目光短浅，只根据当前已有的信息就做出选择，而且一旦做出了选择，不管将来有什么结果，这个选择都不会改变。换言之，贪心法并不是从整体最优考虑，它所做出的选择只是在某种意义上的局部最优。

这种局部最优选择并不总能获得整体最优解（Optimal Solution），但通常能获得近似最优解（Near-Optimal Solution）。
二维数组输入

通俗的理解，二维数组输入就是：通过两个嵌套的 for 循环，输入每个元素。

    int rows, cols;
        printf("Enter the number of rows and columns: ");
        scanf("%d %d", &rows, &cols);

        int i, j;
        int arr[rows][cols];

        printf("Enter the elements row-wise:\n");
        for (i = 0; i < rows; i++) {
            for (j = 0; j < cols; j++) {
                scanf("%d", &arr[i][j]);
            }
        }

图着色：用不同的颜色为图着色，使得图上每个区域着一种颜色，且相邻区域颜色不同，请给出用这种方式对图着色最终需要的最小色数是多少。
编程要求

根据提示，在右侧编辑器补充代码，计算并给定定点信息的所对应的图着色问题的最小色数并给出着色方案。
测试说明

平台会对你编写的代码进行测试：

测试输入：
5
0 1 0 0 0
1 0 1 1 0
0 1 0 0 1
0 1 0 0 1
0 0 1 1 0
预期输出：
2
1 2 1 1 2

代码
在另一个文件中(cpp格式需要改写成lua)
